/**
 * generated by Xtext 2.14.0
 */
package org.xtext.template.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function0;

@SuppressWarnings("all")
public class TemplateGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("FileReader.cpp", this.FileReader);
  }
  
  private CharSequence FileReader = new Function0<CharSequence>() {
    public CharSequence apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("#include <iostream>\\n");
      _builder.newLine();
      _builder.append("#include <fstream>\\n");
      _builder.newLine();
      _builder.append("#include <memory>\\n");
      _builder.newLine();
      _builder.append("#include <string>\\n");
      _builder.newLine();
      _builder.append("#include <vector>\\n");
      _builder.newLine();
      _builder.newLine();
      _builder.append("using namespace std;\\n");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//Auto Generated Function\\n");
      _builder.newLine();
      _builder.append("unique_ptr<vector<string>> FileReader()\\n");
      _builder.newLine();
      _builder.append("{\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("string line;\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ifstream file;\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file.open(\"FileToRead.txt\");\\n\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("auto buffer = make_unique<vector<string>>();\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while(!file.eof())\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{\\n");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("getline(file, line);\\n");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("buffer->push_bash(line);\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("file.close();\\n\\n");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return buffer;\\n");
      _builder.newLine();
      _builder.append("}\\n");
      _builder.newLine();
      return _builder;
    }
  }.apply();
}
