/*
 * generated by Xtext 2.14.0
 */
grammar InternalTemplate;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.template.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.template.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.template.services.TemplateGrammarAccess;

}

@parser::members {

 	private TemplateGrammarAccess grammarAccess;

    public InternalTemplateParser(TokenStream input, TemplateGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Template";
   	}

   	@Override
   	protected TemplateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	iv_ruleTemplate=ruleTemplate
	{ $current=$iv_ruleTemplate.current; }
	EOF;

// Rule Template
ruleTemplate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTemplateAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTemplateRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.template.Template.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getIncludeParserRuleCall_0());
		}
		this_Include_0=ruleInclude
		{
			$current.merge(this_Include_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getNamespaceParserRuleCall_1());
		}
		this_Namespace_1=ruleNamespace
		{
			$current.merge(this_Namespace_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getFunctionParserRuleCall_2());
		}
		this_Function_2=ruleFunction
		{
			$current.merge(this_Function_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current.getText(); }
	EOF;

// Rule Include
ruleInclude returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='#include'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIncludeAccess().getFileParserRuleCall_1());
		}
		this_File_1=ruleFile
		{
			$current.merge(this_File_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFile
entryRuleFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current.getText(); }
	EOF;

// Rule File
ruleFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFileAccess().getLessThanSignKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getFileAccess().getIDTerminalRuleCall_1());
		}
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFileAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleNamespace
entryRuleNamespace returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	iv_ruleNamespace=ruleNamespace
	{ $current=$iv_ruleNamespace.current.getText(); }
	EOF;

// Rule Namespace
ruleNamespace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='using'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNamespaceAccess().getUsingKeyword_0());
		}
		kw='namespace'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNamespaceAccess().getNamespaceKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getNamespaceAccess().getIDTerminalRuleCall_2());
		}
		{
			newCompositeNode(grammarAccess.getNamespaceAccess().getEndParserRuleCall_3());
		}
		this_End_3=ruleEnd
		{
			$current.merge(this_End_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current.getText(); }
	EOF;

// Rule DataType
ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='auto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getAutoKeyword_0());
		}
		    |
		kw='void'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypeAccess().getVoidKeyword_1());
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current.getText(); }
	EOF;

// Rule Loop
ruleLoop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='while'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopAccess().getWhileKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getLoopAccess().getBooleanParserRuleCall_2());
		}
		this_Boolean_2=ruleBoolean
		{
			$current.merge(this_Boolean_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopAccess().getRightParenthesisKeyword_3());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			{
				newCompositeNode(grammarAccess.getLoopAccess().getStatementParserRuleCall_5());
			}
			this_Statement_5=ruleStatement
			{
				$current.merge(this_Statement_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getExclamationMarkKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBooleanAccess().getAccessOperatorParserRuleCall_1());
		}
		this_AccessOperator_1=ruleAccessOperator
		{
			$current.merge(this_AccessOperator_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current.getText(); }
	EOF;

// Rule Return
ruleReturn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='return'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnAccess().getReturnKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getReturnAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleArgumentList
entryRuleArgumentList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	iv_ruleArgumentList=ruleArgumentList
	{ $current=$iv_ruleArgumentList.current.getText(); }
	EOF;

// Rule ArgumentList
ruleArgumentList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getArgumentListAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getArgumentListAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getArgumentListAccess().getINTTerminalRuleCall_2());
		}
		    |
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getArgumentListAccess().getCommaKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getArgumentListAccess().getArgumentListParserRuleCall_3_1());
			}
			this_ArgumentList_4=ruleArgumentList
			{
				$current.merge(this_ArgumentList_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current.getText(); }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionCallAccess().getObjectTypeParserRuleCall_0());
		}
		this_ObjectType_0=ruleObjectType
		{
			$current.merge(this_ObjectType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getFunctionCallAccess().getGenericParserRuleCall_1_0());
			}
			this_Generic_1=ruleGeneric
			{
				$current.merge(this_Generic_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentListParserRuleCall_1_2());
				}
				this_ArgumentList_3=ruleArgumentList
				{
					$current.merge(this_ArgumentList_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleGeneric
entryRuleGeneric returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGenericRule()); }
	iv_ruleGeneric=ruleGeneric
	{ $current=$iv_ruleGeneric.current.getText(); }
	EOF;

// Rule Generic
ruleGeneric returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getGenericAccess().getIDTerminalRuleCall_0_0());
			}
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getGenericAccess().getLessThanSignKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getGenericAccess().getGenericParserRuleCall_0_2());
			}
			this_Generic_2=ruleGeneric
			{
				$current.merge(this_Generic_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getGenericAccess().getGreaterThanSignKeyword_0_3());
			}
		)
		    |
		this_ID_4=RULE_ID
		{
			$current.merge(this_ID_4);
		}
		{
			newLeafNode(this_ID_4, grammarAccess.getGenericAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleObjectType
entryRuleObjectType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getObjectTypeRule()); }
	iv_ruleObjectType=ruleObjectType
	{ $current=$iv_ruleObjectType.current.getText(); }
	EOF;

// Rule ObjectType
ruleObjectType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getObjectTypeAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleVarName
entryRuleVarName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	iv_ruleVarName=ruleVarName
	{ $current=$iv_ruleVarName.current.getText(); }
	EOF;

// Rule VarName
ruleVarName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getVarNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current.getText(); }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVarDeclarationAccess().getDataTypeParserRuleCall_0_0());
			}
			this_DataType_0=ruleDataType
			{
				$current.merge(this_DataType_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getVarDeclarationAccess().getObjectTypeParserRuleCall_0_1());
			}
			this_ObjectType_1=ruleObjectType
			{
				$current.merge(this_ObjectType_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		{
			newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarNameParserRuleCall_1());
		}
		this_VarName_2=ruleVarName
		{
			$current.merge(this_VarName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVarAssign
entryRuleVarAssign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarAssignRule()); }
	iv_ruleVarAssign=ruleVarAssign
	{ $current=$iv_ruleVarAssign.current.getText(); }
	EOF;

// Rule VarAssign
ruleVarAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarAssignAccess().getVarDeclarationParserRuleCall_0());
		}
		this_VarDeclaration_0=ruleVarDeclaration
		{
			$current.merge(this_VarDeclaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getVarAssignAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current.merge(this_FunctionCall_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturnType
entryRuleReturnType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnTypeRule()); }
	iv_ruleReturnType=ruleReturnType
	{ $current=$iv_ruleReturnType.current.getText(); }
	EOF;

// Rule ReturnType
ruleReturnType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReturnTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current.merge(this_DataType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReturnTypeAccess().getGenericParserRuleCall_1());
		}
		this_Generic_1=ruleGeneric
		{
			$current.merge(this_Generic_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAccessOperator
entryRuleAccessOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAccessOperatorRule()); }
	iv_ruleAccessOperator=ruleAccessOperator
	{ $current=$iv_ruleAccessOperator.current.getText(); }
	EOF;

// Rule AccessOperator
ruleAccessOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAccessOperatorAccess().getObjectTypeParserRuleCall_0());
		}
		this_ObjectType_0=ruleObjectType
		{
			$current.merge(this_ObjectType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAccessOperatorAccess().getFullStopKeyword_1_0());
			}
			    |
			kw='->'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAccessOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getAccessOperatorAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_3=ruleFunctionCall
		{
			$current.merge(this_FunctionCall_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeParserRuleCall_0());
		}
		this_ReturnType_0=ruleReturnType
		{
			$current.merge(this_ReturnType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getFunctionAccess().getIDTerminalRuleCall_1());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getStatementParserRuleCall_5_0());
			}
			this_Statement_5=ruleStatement
			{
				$current.merge(this_Statement_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getLoopParserRuleCall_5_1());
			}
			this_Loop_6=ruleLoop
			{
				$current.merge(this_Loop_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current.getText(); }
	EOF;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_0());
			}
			this_VarDeclaration_0=ruleVarDeclaration
			{
				$current.merge(this_VarDeclaration_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_0_1());
			}
			this_VarAssign_1=ruleVarAssign
			{
				$current.merge(this_VarAssign_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_0_2());
			}
			this_FunctionCall_2=ruleFunctionCall
			{
				$current.merge(this_FunctionCall_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getAccessOperatorParserRuleCall_0_3());
			}
			this_AccessOperator_3=ruleAccessOperator
			{
				$current.merge(this_AccessOperator_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_4());
			}
			this_Return_4=ruleReturn
			{
				$current.merge(this_Return_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEndParserRuleCall_1());
		}
		this_End_5=ruleEnd
		{
			$current.merge(this_End_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current.getText(); }
	EOF;

// Rule End
ruleEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=';'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEndAccess().getSemicolonKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
