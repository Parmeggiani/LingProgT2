/*
 * generated by Xtext 2.14.0
 */
package org.xtext.template.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TemplateGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Template");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Template:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamespaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	Include | Namespace | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//Include | Namespace | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }
		
		//Namespace
		public RuleCall getNamespaceParserRuleCall_1() { return cNamespaceParserRuleCall_1; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFileParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Include:
		//	'#include' File;
		@Override public ParserRule getRule() { return rule; }
		
		//'#include' File
		public Group getGroup() { return cGroup; }
		
		//'#include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//File
		public RuleCall getFileParserRuleCall_1() { return cFileParserRuleCall_1; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//File:
		//	'<' ID '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' ID '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNamespaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Namespace:
		//	'using' 'namespace' ID End;
		@Override public ParserRule getRule() { return rule; }
		
		//'using' 'namespace' ID End
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_1() { return cNamespaceKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//End
		public RuleCall getEndParserRuleCall_3() { return cEndParserRuleCall_3; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAutoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DataType:
		//	'auto' | 'void';
		@Override public ParserRule getRule() { return rule; }
		
		//'auto' | 'void'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'auto'
		public Keyword getAutoKeyword_0() { return cAutoKeyword_0; }
		
		//'void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cStatementParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop:
		//	'while' '(' Boolean ')' '{' Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' Boolean ')' '{' Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//Statement*
		public RuleCall getStatementParserRuleCall_5() { return cStatementParserRuleCall_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAccessOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Boolean:
		//	'!' AccessOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' AccessOperator
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//AccessOperator
		public RuleCall getAccessOperatorParserRuleCall_1() { return cAccessOperatorParserRuleCall_1; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Return:
		//	'return' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' ID
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.ArgumentList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentListParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//ArgumentList:
		//	ID | STRING | INT | ',' ArgumentList;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | INT | ',' ArgumentList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//',' ArgumentList
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ArgumentList
		public RuleCall getArgumentListParserRuleCall_3_1() { return cArgumentListParserRuleCall_3_1; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cGenericParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentListParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//FunctionCall:
		//	ObjectType | Generic '(' ArgumentList* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectType | Generic '(' ArgumentList* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectType
		public RuleCall getObjectTypeParserRuleCall_0() { return cObjectTypeParserRuleCall_0; }
		
		//Generic '(' ArgumentList* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//Generic
		public RuleCall getGenericParserRuleCall_1_0() { return cGenericParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ArgumentList*
		public RuleCall getArgumentListParserRuleCall_1_2() { return cArgumentListParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class GenericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Generic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cGenericParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Generic:
		//	ID '<' Generic '>' | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '<' Generic '>' | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '<' Generic '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//Generic
		public RuleCall getGenericParserRuleCall_0_2() { return cGenericParserRuleCall_0_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_3() { return cGreaterThanSignKeyword_0_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.ObjectType");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ObjectType:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.VarName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VarName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjectTypeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//VarDeclaration:
		//	(DataType | ObjectType) VarName;
		@Override public ParserRule getRule() { return rule; }
		
		//(DataType | ObjectType) VarName
		public Group getGroup() { return cGroup; }
		
		//DataType | ObjectType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0_0() { return cDataTypeParserRuleCall_0_0; }
		
		//ObjectType
		public RuleCall getObjectTypeParserRuleCall_0_1() { return cObjectTypeParserRuleCall_0_1; }
		
		//VarName
		public RuleCall getVarNameParserRuleCall_1() { return cVarNameParserRuleCall_1; }
	}
	public class VarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.VarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVarDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VarAssign:
		//	VarDeclaration '=' FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDeclaration '=' FunctionCall
		public Group getGroup() { return cGroup; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0() { return cVarDeclarationParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.ReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenericParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReturnType:
		//	DataType | Generic;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Generic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Generic
		public RuleCall getGenericParserRuleCall_1() { return cGenericParserRuleCall_1; }
	}
	public class AccessOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.AccessOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cObjectTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AccessOperator:
		//	ObjectType ('.' | '->') FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectType ('.' | '->') FunctionCall
		public Group getGroup() { return cGroup; }
		
		//ObjectType
		public RuleCall getObjectTypeParserRuleCall_0() { return cObjectTypeParserRuleCall_0; }
		
		//'.' | '->'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReturnTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cStatementParserRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function:
		//	ReturnType ID '(' ')' '{' (Statement | Loop)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//ReturnType ID '(' ')' '{' (Statement | Loop)* '}'
		public Group getGroup() { return cGroup; }
		
		//ReturnType
		public RuleCall getReturnTypeParserRuleCall_0() { return cReturnTypeParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(Statement | Loop)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_5_0() { return cStatementParserRuleCall_5_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_5_1() { return cLoopParserRuleCall_5_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVarDeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cVarAssignParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAccessOperatorParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cReturnParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cEndParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//	(VarDeclaration | VarAssign | FunctionCall | AccessOperator | Return) End;
		@Override public ParserRule getRule() { return rule; }
		
		//(VarDeclaration | VarAssign | FunctionCall | AccessOperator | Return) End
		public Group getGroup() { return cGroup; }
		
		//VarDeclaration | VarAssign | FunctionCall | AccessOperator | Return
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0_0() { return cVarDeclarationParserRuleCall_0_0; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_0_1() { return cVarAssignParserRuleCall_0_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0_2() { return cFunctionCallParserRuleCall_0_2; }
		
		//AccessOperator
		public RuleCall getAccessOperatorParserRuleCall_0_3() { return cAccessOperatorParserRuleCall_0_3; }
		
		//Return
		public RuleCall getReturnParserRuleCall_0_4() { return cReturnParserRuleCall_0_4; }
		
		//End
		public RuleCall getEndParserRuleCall_1() { return cEndParserRuleCall_1; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.template.Template.End");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//End:
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	
	
	private final TemplateElements pTemplate;
	private final TypeElements pType;
	private final IncludeElements pInclude;
	private final FileElements pFile;
	private final NamespaceElements pNamespace;
	private final DataTypeElements pDataType;
	private final LoopElements pLoop;
	private final BooleanElements pBoolean;
	private final ReturnElements pReturn;
	private final ArgumentListElements pArgumentList;
	private final FunctionCallElements pFunctionCall;
	private final GenericElements pGeneric;
	private final ObjectTypeElements pObjectType;
	private final VarNameElements pVarName;
	private final VarDeclarationElements pVarDeclaration;
	private final VarAssignElements pVarAssign;
	private final ReturnTypeElements pReturnType;
	private final AccessOperatorElements pAccessOperator;
	private final FunctionElements pFunction;
	private final StatementElements pStatement;
	private final EndElements pEnd;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TemplateGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTemplate = new TemplateElements();
		this.pType = new TypeElements();
		this.pInclude = new IncludeElements();
		this.pFile = new FileElements();
		this.pNamespace = new NamespaceElements();
		this.pDataType = new DataTypeElements();
		this.pLoop = new LoopElements();
		this.pBoolean = new BooleanElements();
		this.pReturn = new ReturnElements();
		this.pArgumentList = new ArgumentListElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pGeneric = new GenericElements();
		this.pObjectType = new ObjectTypeElements();
		this.pVarName = new VarNameElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVarAssign = new VarAssignElements();
		this.pReturnType = new ReturnTypeElements();
		this.pAccessOperator = new AccessOperatorElements();
		this.pFunction = new FunctionElements();
		this.pStatement = new StatementElements();
		this.pEnd = new EndElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.template.Template".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Template:
	//	elements+=Type*;
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//Type:
	//	Include | Namespace | Function;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Include:
	//	'#include' File;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//File:
	//	'<' ID '>';
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//Namespace:
	//	'using' 'namespace' ID End;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//DataType:
	//	'auto' | 'void';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Loop:
	//	'while' '(' Boolean ')' '{' Statement* '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Boolean:
	//	'!' AccessOperator;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Return:
	//	'return' ID;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//ArgumentList:
	//	ID | STRING | INT | ',' ArgumentList;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//FunctionCall:
	//	ObjectType | Generic '(' ArgumentList* ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Generic:
	//	ID '<' Generic '>' | ID;
	public GenericElements getGenericAccess() {
		return pGeneric;
	}
	
	public ParserRule getGenericRule() {
		return getGenericAccess().getRule();
	}
	
	//ObjectType:
	//	ID;
	public ObjectTypeElements getObjectTypeAccess() {
		return pObjectType;
	}
	
	public ParserRule getObjectTypeRule() {
		return getObjectTypeAccess().getRule();
	}
	
	//VarName:
	//	ID;
	public VarNameElements getVarNameAccess() {
		return pVarName;
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}
	
	//VarDeclaration:
	//	(DataType | ObjectType) VarName;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//VarAssign:
	//	VarDeclaration '=' FunctionCall;
	public VarAssignElements getVarAssignAccess() {
		return pVarAssign;
	}
	
	public ParserRule getVarAssignRule() {
		return getVarAssignAccess().getRule();
	}
	
	//ReturnType:
	//	DataType | Generic;
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	//AccessOperator:
	//	ObjectType ('.' | '->') FunctionCall;
	public AccessOperatorElements getAccessOperatorAccess() {
		return pAccessOperator;
	}
	
	public ParserRule getAccessOperatorRule() {
		return getAccessOperatorAccess().getRule();
	}
	
	//Function:
	//	ReturnType ID '(' ')' '{' (Statement | Loop)* '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Statement:
	//	(VarDeclaration | VarAssign | FunctionCall | AccessOperator | Return) End;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//End:
	//	';';
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
