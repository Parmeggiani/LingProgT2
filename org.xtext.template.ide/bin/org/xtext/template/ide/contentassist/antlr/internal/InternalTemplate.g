/*
 * generated by Xtext 2.14.0
 */
grammar InternalTemplate;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.template.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.template.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.template.services.TemplateGrammarAccess;

}
@parser::members {
	private TemplateGrammarAccess grammarAccess;

	public void setGrammarAccess(TemplateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTemplate
entryRuleTemplate
:
{ before(grammarAccess.getTemplateRule()); }
	 ruleTemplate
{ after(grammarAccess.getTemplateRule()); } 
	 EOF 
;

// Rule Template
ruleTemplate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemplateAccess().getElementsAssignment()); }
		(rule__Template__ElementsAssignment)*
		{ after(grammarAccess.getTemplateAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInclude
entryRuleInclude
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeAccess().getGroup()); }
		(rule__Include__Group__0)
		{ after(grammarAccess.getIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamespace
entryRuleNamespace
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamespaceAccess().getGroup()); }
		(rule__Namespace__Group__0)
		{ after(grammarAccess.getNamespaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getGroup()); }
		(rule__Boolean__Group__0)
		{ after(grammarAccess.getBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturn
entryRuleReturn
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnAccess().getGroup()); }
		(rule__Return__Group__0)
		{ after(grammarAccess.getReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgumentList
entryRuleArgumentList
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleArgumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule ArgumentList
ruleArgumentList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentListAccess().getAlternatives()); }
		(rule__ArgumentList__Alternatives)
		{ after(grammarAccess.getArgumentListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
		(rule__FunctionCall__Alternatives)
		{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneric
entryRuleGeneric
:
{ before(grammarAccess.getGenericRule()); }
	 ruleGeneric
{ after(grammarAccess.getGenericRule()); } 
	 EOF 
;

// Rule Generic
ruleGeneric 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGenericAccess().getAlternatives()); }
		(rule__Generic__Alternatives)
		{ after(grammarAccess.getGenericAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectType
entryRuleObjectType
:
{ before(grammarAccess.getObjectTypeRule()); }
	 ruleObjectType
{ after(grammarAccess.getObjectTypeRule()); } 
	 EOF 
;

// Rule ObjectType
ruleObjectType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectTypeAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getObjectTypeAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarName
entryRuleVarName
:
{ before(grammarAccess.getVarNameRule()); }
	 ruleVarName
{ after(grammarAccess.getVarNameRule()); } 
	 EOF 
;

// Rule VarName
ruleVarName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getVarNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarAssign
entryRuleVarAssign
:
{ before(grammarAccess.getVarAssignRule()); }
	 ruleVarAssign
{ after(grammarAccess.getVarAssignRule()); } 
	 EOF 
;

// Rule VarAssign
ruleVarAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAssignAccess().getGroup()); }
		(rule__VarAssign__Group__0)
		{ after(grammarAccess.getVarAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnType
entryRuleReturnType
:
{ before(grammarAccess.getReturnTypeRule()); }
	 ruleReturnType
{ after(grammarAccess.getReturnTypeRule()); } 
	 EOF 
;

// Rule ReturnType
ruleReturnType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnTypeAccess().getAlternatives()); }
		(rule__ReturnType__Alternatives)
		{ after(grammarAccess.getReturnTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAccessOperator
entryRuleAccessOperator
:
{ before(grammarAccess.getAccessOperatorRule()); }
	 ruleAccessOperator
{ after(grammarAccess.getAccessOperatorRule()); } 
	 EOF 
;

// Rule AccessOperator
ruleAccessOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAccessOperatorAccess().getGroup()); }
		(rule__AccessOperator__Group__0)
		{ after(grammarAccess.getAccessOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnd
entryRuleEnd
:
{ before(grammarAccess.getEndRule()); }
	 ruleEnd
{ after(grammarAccess.getEndRule()); } 
	 EOF 
;

// Rule End
ruleEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndAccess().getSemicolonKeyword()); }
		';'
		{ after(grammarAccess.getEndAccess().getSemicolonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getIncludeParserRuleCall_0()); }
		ruleInclude
		{ after(grammarAccess.getTypeAccess().getIncludeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getNamespaceParserRuleCall_1()); }
		ruleNamespace
		{ after(grammarAccess.getTypeAccess().getNamespaceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getFunctionParserRuleCall_2()); }
		ruleFunction
		{ after(grammarAccess.getTypeAccess().getFunctionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getAutoKeyword_0()); }
		'auto'
		{ after(grammarAccess.getDataTypeAccess().getAutoKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getVoidKeyword_1()); }
		'void'
		{ after(grammarAccess.getDataTypeAccess().getVoidKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentListAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getArgumentListAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentListAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getArgumentListAccess().getSTRINGTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentListAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getArgumentListAccess().getINTTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentListAccess().getGroup_3()); }
		(rule__ArgumentList__Group_3__0)
		{ after(grammarAccess.getArgumentListAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getObjectTypeParserRuleCall_0()); }
		ruleObjectType
		{ after(grammarAccess.getFunctionCallAccess().getObjectTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
		(rule__FunctionCall__Group_1__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGenericAccess().getGroup_0()); }
		(rule__Generic__Group_0__0)
		{ after(grammarAccess.getGenericAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getGenericAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getGenericAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getDataTypeParserRuleCall_0_0()); }
		ruleDataType
		{ after(grammarAccess.getVarDeclarationAccess().getDataTypeParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarDeclarationAccess().getObjectTypeParserRuleCall_0_1()); }
		ruleObjectType
		{ after(grammarAccess.getVarDeclarationAccess().getObjectTypeParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnTypeAccess().getDataTypeParserRuleCall_0()); }
		ruleDataType
		{ after(grammarAccess.getReturnTypeAccess().getDataTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getReturnTypeAccess().getGenericParserRuleCall_1()); }
		ruleGeneric
		{ after(grammarAccess.getReturnTypeAccess().getGenericParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessOperatorAccess().getFullStopKeyword_1_0()); }
		'.'
		{ after(grammarAccess.getAccessOperatorAccess().getFullStopKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAccessOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
		'->'
		{ after(grammarAccess.getAccessOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getFunctionAccess().getStatementParserRuleCall_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getLoopParserRuleCall_5_1()); }
		ruleLoop
		{ after(grammarAccess.getFunctionAccess().getLoopParserRuleCall_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_0_1()); }
		ruleVarAssign
		{ after(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_0_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAccessOperatorParserRuleCall_0_3()); }
		ruleAccessOperator
		{ after(grammarAccess.getStatementAccess().getAccessOperatorParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_4()); }
		ruleReturn
		{ after(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
	'#include'
	{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getFileParserRuleCall_1()); }
	ruleFile
	{ after(grammarAccess.getIncludeAccess().getFileParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getFileAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
	rule__File__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getFileAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getFileAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getUsingKeyword_0()); }
	'using'
	{ after(grammarAccess.getNamespaceAccess().getUsingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getNamespaceKeyword_1()); }
	'namespace'
	{ after(grammarAccess.getNamespaceAccess().getNamespaceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__2__Impl
	rule__Namespace__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getNamespaceAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getEndParserRuleCall_3()); }
	ruleEnd
	{ after(grammarAccess.getNamespaceAccess().getEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getBooleanParserRuleCall_2()); }
	ruleBoolean
	{ after(grammarAccess.getLoopAccess().getBooleanParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLoopAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getStatementParserRuleCall_5()); }
	(ruleStatement)*
	{ after(grammarAccess.getLoopAccess().getStatementParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__0__Impl
	rule__Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getExclamationMarkKeyword_0()); }
	'!'
	{ after(grammarAccess.getBooleanAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getAccessOperatorParserRuleCall_1()); }
	ruleAccessOperator
	{ after(grammarAccess.getBooleanAccess().getAccessOperatorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getReturnAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_3__0__Impl
	rule__ArgumentList__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getArgumentListAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArgumentList__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentList__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentListAccess().getArgumentListParserRuleCall_3_1()); }
	ruleArgumentList
	{ after(grammarAccess.getArgumentListAccess().getArgumentListParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGenericParserRuleCall_1_0()); }
	ruleGeneric
	{ after(grammarAccess.getFunctionCallAccess().getGenericParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__2__Impl
	rule__FunctionCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentListParserRuleCall_1_2()); }
	(ruleArgumentList)*
	{ after(grammarAccess.getFunctionCallAccess().getArgumentListParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generic__Group_0__0__Impl
	rule__Generic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenericAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getGenericAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generic__Group_0__1__Impl
	rule__Generic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenericAccess().getLessThanSignKeyword_0_1()); }
	'<'
	{ after(grammarAccess.getGenericAccess().getLessThanSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generic__Group_0__2__Impl
	rule__Generic__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenericAccess().getGenericParserRuleCall_0_2()); }
	ruleGeneric
	{ after(grammarAccess.getGenericAccess().getGenericParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generic__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generic__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenericAccess().getGreaterThanSignKeyword_0_3()); }
	'>'
	{ after(grammarAccess.getGenericAccess().getGreaterThanSignKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getAlternatives_0()); }
	(rule__VarDeclaration__Alternatives_0)
	{ after(grammarAccess.getVarDeclarationAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarNameParserRuleCall_1()); }
	ruleVarName
	{ after(grammarAccess.getVarDeclarationAccess().getVarNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__0__Impl
	rule__VarAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getVarDeclarationParserRuleCall_0()); }
	ruleVarDeclaration
	{ after(grammarAccess.getVarAssignAccess().getVarDeclarationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__1__Impl
	rule__VarAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getFunctionCallParserRuleCall_2()); }
	ruleFunctionCall
	{ after(grammarAccess.getVarAssignAccess().getFunctionCallParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AccessOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccessOperator__Group__0__Impl
	rule__AccessOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessOperatorAccess().getObjectTypeParserRuleCall_0()); }
	ruleObjectType
	{ after(grammarAccess.getAccessOperatorAccess().getObjectTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccessOperator__Group__1__Impl
	rule__AccessOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessOperatorAccess().getAlternatives_1()); }
	(rule__AccessOperator__Alternatives_1)
	{ after(grammarAccess.getAccessOperatorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AccessOperator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessOperator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessOperatorAccess().getFunctionCallParserRuleCall_2()); }
	ruleFunctionCall
	{ after(grammarAccess.getAccessOperatorAccess().getFunctionCallParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnTypeParserRuleCall_0()); }
	ruleReturnType
	{ after(grammarAccess.getFunctionAccess().getReturnTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getFunctionAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getAlternatives_5()); }
	(rule__Function__Alternatives_5)*
	{ after(grammarAccess.getFunctionAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
	(rule__Statement__Alternatives_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getEndParserRuleCall_1()); }
	ruleEnd
	{ after(grammarAccess.getStatementAccess().getEndParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Template__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemplateAccess().getElementsTypeParserRuleCall_0()); }
		ruleType
		{ after(grammarAccess.getTemplateAccess().getElementsTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
